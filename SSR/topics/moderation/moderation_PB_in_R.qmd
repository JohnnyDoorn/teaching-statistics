# Moderation {.section}

<!-- Allow color highlighting in mathjax -->
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({ TeX: { extensions: ["color.js"] }});
</script>

```{r, echo=FALSE}
rm(list=ls())
if(!"DT" %in% installed.packages()) { install.packages("DT") }
library("DT")

knitr::opts_chunk$set(echo = TRUE)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
```

## Moderation

In statistics and regression analysis, moderation occurs when the relationship between two variables depends on a third variable. The third variable is referred to as the moderator variable or simply the moderator. The effect of a moderating variable is characterized statistically as an interaction.

Source [WIKIPEDIA](https://en.wikipedia.org/wiki/Moderation_(statistics))

## Model {.center}

$$\definecolor{red}{RGB}{255,0,0} \definecolor{black}{RGB}{0,0,0}
\color{black}Out_i = b_0 + b_1 Pred_i + b_2 Mod_i + \color{red}b_3 Pred_i \times Mod_i \color{black}+ \epsilon_i$$

![](../../../../topics/moderation/moderation.png)

## Example {.smaller}

Video games are among the favourite online activities for young people: two-thirds of 5–16-year-olds have their own video games console, and 88% of boys aged 8–15 own at least one games console. Although playing violent video games can enhance visuospatial acuity, visual memory, probabilistic inference, and mental rotation, compared to games such as Tetris, these games have also been linked to increased aggression in youths Another predictor of aggression and conduct problems is callous-unemotional traits such as lack of guilt, lack of empathy, and callous use of others for personal gain. 

Imagine a scientist wanted to look at the relationship between playing violent video games such as Grand Theft Auto, MadWorld and Manhunt and aggression. She gathered data from 442 youths. She measured their aggressive behaviour, callous unemotional traits, and the number of hours per week they play video games.

Source: Field 11.3.1

## Simulate data

```{r}
set.seed(283) ## Mooie seed :-)
predictor <-             rnorm(100, 0, 3)
moderator <- predictor + rnorm(100, 0, 3) ## multicollineariteit
error     <-             rnorm(100, 0, 3) ## error
intercept <- 5
outcome   <- intercept + .5*predictor + 
                        -.4*moderator + 
                         .4*predictor*moderator + 
                         error
```

## Mean un centring

```{r}
predictor <- predictor + 15 
moderator <- moderator + 7

data <- data.frame(predictor, moderator, outcome)
head(data) 
```

```{r,echo=FALSE}
save(data, file="moderation.rdata")
write.csv(data, "moderation.csv")
```

## View data {.smaller .subsection}

```{r, echo=FALSE}
datatable(round(data,2), 
          rownames   = FALSE, 
          extensions = 'Buttons',
          options = list(searching = FALSE, 
                         scrollY   = 350, 
                         paging    = F, 
                         info      = F,                          
                         dom       = 'Bfrtip',
                         buttons   = c('csv')))
```

## Scatterplots {.subsection}

```{r}
plot(data)
```

## Correlations

```{r}
cor(data)
```

## 3D plot

```{r, echo=FALSE, warning=FALSE, message=FALSE, webgl=TRUE}
## 3d plot package rgl
## install.packages('rgl')
## install.packages("manipulateWidget")
library("rgl")
library("manipulateWidget")
attach(data)

par3d(mouseMode = "trackball")

plot3d(predictor, moderator, outcome, 
       #col  = rainbow(100), 
       col  = "red",
       size = 8) -> my.plot

my.plot
# rglwidget(reuse = FALSE)
```

Take it for a spin (does not work on tablet)

## Fit model {.smaller .subsection}

```{r}
#fit2 <- lm(outcome ~ predictor + moderator)
fit <- lm(outcome ~ predictor + moderator + predictor*moderator); summary(fit)
```

## Regression equation {.smaller .center}

$\definecolor{red}{RGB}{255,0,0} \definecolor{black}{RGB}{0,0,0}
\color{black}\widehat{Out_i} = b_0 + b_1 Pred_i + b_2 Mod_i + \color{red}b_3 Pred_i \times Mod_i \color{black}$

$\definecolor{red}{RGB}{255,0,0} \definecolor{black}{RGB}{0,0,0}
\color{black}\widehat{Out_i} = `r round(fit$coefficients[1],2)` + `r round(fit$coefficients[2],2)` \times Pred_i + `r round(fit$coefficients[3],2)` \times Mod_i + \color{red} `r round(fit$coefficients[4],2)` \times Pred_i \times Mod_i \color{black}$

```{r}
regeq <- function(model, predictor, moderator) { 
    fit$coefficients[1] + 
    fit$coefficients[2]*predictor + 
    fit$coefficients[3]*moderator + 
    fit$coefficients[4]*predictor*moderator
}

x.pre <- seq(10,21,length.out=30)
y.mod <- seq( 0,16,length.out=30)

z.pre <- outer(x.pre, y.mod, FUN='regeq', model=fit)
```

## Simple Slopes {.subsection}

<small>We use the [interactions packaage](https://cran.r-project.org/web/packages/interactions/vignettes/interactions.html#simple_slopes_analysis_and_johnson-neyman_intervals)

```{r}
if(!"interactions" %in% installed.packages()) { install.packages("interactions") };
if(!"sandwich" %in% installed.packages()) { install.packages("sandwich") };
library("sandwich")

library("interactions")
sim_slopes(fit, pred = predictor, modx = moderator, johnson_neyman = FALSE)
```
</small>

## Visual

```{r}
interact_plot(fit, pred = predictor, modx = moderator, johnson_neyman = FALSE)
```


## Johnson-Neyman intervals {.subsection}

```{r}
sim_slopes(fit, pred = predictor, modx = moderator, johnson_neyman = T)
```

## Visual

```{r}
johnson_neyman(fit, pred = predictor, modx = moderator, alpha = .05)
```

## Plot 3D {.subsection}

### 1 SD planes

```{r}
quantiles <- as.vector(quantile(moderator,seq(.1,.9,.1)))
sds       <- c(mean(moderator)+(sd(moderator)*c(-1,0,1)))  
```

## SD Planes visual

```{r, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}
my.plot

par3d(mouseMode = "zAxis")

planes3d(a = 0, 
         b = 1, 
         c = 0,
         d = -sds,
         #d = -quantiles,
         alpha=0.7,
         color = c("blue"))

# rglwidget()

M <- r3dDefaults$userMatrix
fn <- par3dinterp(time = (0:2)*0.75, userMatrix = list(M, rotate3d(M, pi/2, 0, 0, 1),
                                                          rotate3d(M, pi/2, 0, 0, 1)) )

rglwidget(reuse = FALSE) %>%
playwidget(par3dinterpControl(fn, 0, 3, steps=15),
       step = 0.01, loop = TRUE, rate = 0.5)
```

## Expected surface

```{r, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}
my.plot

surface3d(x.pre,y.mod,z.pre, color = c("green"))

aspect3d(1,1,1)

subid <- currentSubscene3d()
rglwidget(elementId="plot3drgl2", reuse = FALSE)
```

<script type="text/javascript">
var rotate = function(angle) {
  var rgl = document.getElementById("plot3drgl2").rglinstance;
  rgl.getObj(`r subid`).par3d.userMatrix.rotate(angle, 1,0,0);
  rgl.drawScene();
};
</script>

<button type="button" onclick="rotate(-10)">Down</button>
<button type="button" onclick="rotate(10)">Up</button>



```{r, echo=FALSE}
data$exp <- fit$fitted.values
```

## Total variance

```{r, echo=FALSE}
## This is all the data
n=nrow(data)
plot(data$outcome,xlab='participants', col='red')
## With the mean
lines(1:n,rep(mean(data$outcome),n),col='black',lwd=2)

## The blue lines are the total variance, the deviation from the mean.
segments(1:n, mean(data$outcome), 1:n, data$outcome, col='black')

p <- recordPlot()
```

## Explained variance {.smaller .subsection}

```{r, echo=FALSE}
p

## The model predicts the IQ scores
points(1:n, data$exp, col='green')

## The part of the variation that overlaps is the 'explained' variance. 
#for(i in 1:n) {lines(c(i,i),c(mean(data$exp), data$exp[i]), col='red')}
segments(1:n, mean(data$exp), 1:n, data$exp, col='green')
```

```{r, echo=FALSE}
colnames(z.pre) <- x.pre
rownames(z.pre) <- y.mod
save(data, x.pre, y.mod, z.pre, quantiles, sds, file="moderation.rdata")
```