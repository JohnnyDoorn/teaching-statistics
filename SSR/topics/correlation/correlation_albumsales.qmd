# Correlation {.section}

```{r, eval=FALSE, echo=FALSE}
# Remove all objects from workspace
rm(list=ls())
```

## Pearson Correlation

<img style="float:left; width:150px; margin:0 20px 20px 0px;" src="https://upload.wikimedia.org/wikipedia/commons/1/18/Karl_Pearson%2C_1912.jpg">

In statistics, the Pearson correlation coefficient, also referred to as the Pearson's r, Pearson product-moment correlation coefficient (PPMCC) or bivariate correlation, is a measure of the linear correlation between two variables X and Y. It has a value between +1 and −1, where 1 is total positive linear correlation, 0 is no linear correlation, and −1 is total negative linear correlation. It is widely used in the sciences. It was developed by Karl Pearson from a related idea introduced by Francis Galton in the 1880s.

Source: [Wikipedia](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient)

## PMCC

$$r_{xy} = \frac{{COV}_{xy}}{S_xS_y}$$
Where $S$ is the standard deviation and $COV$ is the covariance.

$${COV}_{xy} = \frac{\sum_{i=1}^N (x_i - \bar{x})(y_i - \bar{y})}{N-1}$$

## Plot correlation

```{r,echo=FALSE, fig.width=5, fig.height=5, fig.align='center'}
set.seed(565433)
data <- read.csv("Album Sales.csv")[, -4]
tinydat <- data[1:5, ]
x <- tinydat$airplay
y <- tinydat$sales
plot(x, y, las = 1, xlab = "Airplay", ylab = "Album Sales")

m.x <- mean(x)
m.y <- mean(y)


points(x,y, pch = 21, bg = "turquoise", col = "black", lwd = 2, cex = 1.5)
corners <- par("usr")


```
## Plot correlation

```{r,echo=FALSE, fig.width=5, fig.height=5, fig.align='center'}
plot(x, y, las = 1, xlab = "Airplay", ylab = "Album Sales")

m.x <- mean(x)
m.y <- mean(y)

xTop <- corners[2]
xBot <- corners[1]
yTop <- corners[4]
yBot <- corners[3]
polygon(c(m.x,xTop,xTop,m.x),c(m.y,m.y,yTop,yTop), col = rgb(0,0.8,0,.2))
polygon(c(m.x,xBot,xBot,m.x),c(m.y,m.y,yBot,yBot), col = rgb(0,0.8,0,.2))

polygon(c(m.x,xBot,xBot,m.x),c(m.y,m.y,yTop,yTop), col = rgb(0.8,0,0,alpha = 0.2))
polygon(c(m.x,xTop,xTop,m.x),c(m.y,m.y,yBot,yBot), col = rgb(0.8,0,0,alpha= 0.2))

points(x,y, pch = 21, bg = "turquoise", col = "black", lwd = 2, cex = 1.5)

abline(h = m.y, lwd = 3)
abline(v = m.x, lwd = 3)

# segments(x, m.y, x, y, col = "darkorange",    lwd = 2)
# segments(x, y, m.x, y, col = "purple", lwd = 2)

mtext(side = 3, bquote(bar(x) ~ "= 840"), cex = 1.5)
mtext(side = 4, bquote(bar(y) ~ "= 260"), cex = 1.5, padj = 0.5, srt=180)
# mtext("Text to the Right", side = 4, line = 1, las = 3)

```

## Plot correlation

```{r,echo=FALSE, fig.width=5, fig.height=5, fig.align='center'}
plot(x, y, las = 1, xlab = "Airplay", ylab = "Album Sales")

m.x <- mean(x)
m.y <- mean(y)

polygon(c(m.x,xTop,xTop,m.x),c(m.y,m.y,yTop,yTop), col = rgb(0,0.8,0,.2))
polygon(c(m.x,xBot,xBot,m.x),c(m.y,m.y,yBot,yBot), col = rgb(0,0.8,0,.2))

polygon(c(m.x,xBot,xBot,m.x),c(m.y,m.y,yTop,yTop), col = rgb(0.8,0,0,alpha = 0.2))
polygon(c(m.x,xTop,xTop,m.x),c(m.y,m.y,yBot,yBot), col = rgb(0.8,0,0,alpha= 0.2))

points(x,y, pch = 21, bg = "turquoise", col = "black", lwd = 2, cex = 1.5)

abline(h = m.y, lwd = 3)
abline(v = m.x, lwd = 3)
segments(x, m.y, x, y, col = "darkorange",    lwd = 2)
segments(x, y, m.x, y, col = "purple", lwd = 2)

mtext(side = 3, bquote(bar(x) ~ "= 36.6"), cex = 1.5)
mtext(side = 4, bquote(bar(y) ~ "= 260"), cex = 1.5, padj = 0.5, srt=180)
```

$$(x_i - \bar{x})(y_i - \bar{y})$$

## Guess the correlation

[Guess the correlation](http://guessthecorrelation.com)

<img src="qrcodeqtc.png">

## Load data

```{r, eval=TRUE, echo=TRUE}
n     <- 50
data <- read.csv("Album Sales.csv")[, -4]
data <- data[1:n, ] # take the first 50 rows of the album sales data set from Field
DT::datatable(data, rownames = FALSE, options = list(searching = FALSE, scrollY = 415, paging = F, info = F))
```


## Explaining variance {.subsection}

```{r, echo = FALSE}
sales         <- data$sales
airplay       <- data$airplay
mean.sales    <- mean(sales)
mean.airplay  <- mean(airplay)
N             <- length(sales)

plot(data$sales, 
     bg='orange', pch = 21, bty = "n", ylim = c(0, 420),
     ylab="Variables",las = 1,
     xlab="Participant")
points(data$airplay, bg='blue', pch = 21)
legend("topright", legend = c("Airplay", "Sales"), fill = c("blue", "orange"), bty = "n")
lines(rep(mean.sales, N), col='orange')
lines(rep(mean.airplay,    N), col='blue', lt=1)
```

## Standardize {.smaller}

$$z = \frac{x_i - \bar{x}}{{sd}_x}$$

```{r, echo=TRUE}
#| output-location: slide
z.sales      <- (data$sales   - mean(data$sales))   / sd(data$sales)
z.airplay    <- (data$airplay - mean(data$airplay)) / sd(data$airplay)
```

## Standardize {.smaller}

```{r, echo= FALSE}
mean.z.sales      <- mean(z.sales)
mean.z.airplay <- mean(z.airplay)

plot(z.sales, 
     bg  = 'orange', pch = 21, bty = "n",ylim = c(-2.5, 3.5),
     ylab = "z-scores", xlab="Participants")

points(z.airplay,  pch = 21, bg='blue')
legend("topright", legend = c("z-airplay", "z-sales"), fill = c("blue", "orange"), bty = "n")

# # Add mean lines
lines(rep(mean.z.sales, N), col='orange')
lines(rep(mean.z.airplay,    N), col='blue', lt=2)
# 
```

## Standardize {.smaller}

```{r, echo= FALSE}
mean.z.sales      <- mean(z.sales)
mean.z.airplay <- mean(z.airplay)

plot(z.sales, 
     bg  = 'orange', pch = 21, bty = "n",ylim = c(-2.5, 3.5),
     ylab = "z-scores", xlab="Participants")

points(z.airplay,  pch = 21, bg='blue')
legend("topright", legend = c("z-airplay", "z-sales"), fill = c("blue", "orange"), bty = "n")

# # Add mean lines
lines(rep(mean.z.sales, N), col='orange')
lines(rep(mean.z.airplay,    N), col='blue', lt=2)
# 
# # Add vertical variance lines
# segments(1:N, z.airplay, 1:N, z.sales, col='red')
segments(1:N, mean.z.sales, 1:N, z.sales, col='orange')
segments(1:N, mean.z.airplay, 1:N, z.airplay, col='blue', lty = 2)
```
## Covariance {.subsection}

$${COV}_{xy} = \frac{\sum_{i=1}^N (x_i - \bar{x})(y_i - \bar{y})}{N-1}$$

```{r, echo=TRUE}
mean.sales      <- mean(sales, na.rm=TRUE)
mean.airplay    <- mean(airplay, na.rm=TRUE)

delta.sales     <- sales - mean.sales
delta.airplay   <- airplay - mean.airplay

prod <- (sales - mean.sales) * (airplay - mean.airplay)

covariance <- sum(prod) / (N - 1)
covariance
```

## Covariance {.smaller}

```{r, echo=FALSE}
mydf <- round(data.frame(sales, 
                         meanSales = mean.sales, 
                         deltaSales = delta.sales,  
                         airplay = airplay, 
                         meanAir = mean.airplay, 
                         deltaAir = delta.airplay, 
                         deltaProduct = prod), 2)
DT::datatable(mydf, rownames = FALSE, options = list(searching = FALSE, scrollY = 415, paging = F, info = F))
```

## Correlation

$$r_{xy} = \frac{{COV}_{xy}}{S_xS_y}$$

```{r, echo=TRUE}
correlation <- covariance / ( sd(sales) * sd(airplay) ); correlation
correlation
```

## Correlation
$$r_{xy} = \frac{{COV}_{xy}}{S_xS_y}$$
$${COV}_{xy} = \frac{\sum_{i=1}^N (x_i - \bar{x})(y_i - \bar{y})}{N-1}$$


```{r, echo=TRUE}
cor(  sales,   airplay) # correlation

cor(z.sales, z.airplay) # correlation of z-scores
```

```{r, echo=TRUE}
# covariance of z-scores
sum(z.sales * z.airplay ) / (N - 1)
```


## Plot correlation

```{r, echo=FALSE}
plot(airplay, sales, las = 1, pch = 21, bg = "turquoise", ylab = "Album Sales", xlab ="Airplay")
abline(h = mean.sales,   col = "black", lwd = 2)
abline(v = mean.airplay, col = "black", lwd = 2)
corners <- par("usr")
xTop <- corners[2]
xBot <- corners[1]
yTop <- corners[4]
yBot <- corners[3]
polygon(c(mean.airplay,xTop,xTop,mean.airplay),c(mean.sales,mean.sales,yTop,yTop), col = rgb(0,0.8,0,.2))
polygon(c(mean.airplay,xBot,xBot,mean.airplay),c(mean.sales,mean.sales,yBot,yBot), col = rgb(0,0.8,0,.2))

polygon(c(mean.airplay,xBot,xBot,mean.airplay),c(mean.sales,mean.sales,yTop,yTop), col = rgb(0.8,0,0,alpha = 0.2))
polygon(c(mean.airplay,xTop,xTop,mean.airplay),c(mean.sales,mean.sales,yBot,yBot), col = rgb(0.8,0,0,alpha= 0.2))
xMargin <- 20
yMargin <- 100
text(mean.sales+xMargin, mean.airplay+yMargin, "+ * +", cex = 2, col = "red")
text(mean.sales-xMargin, mean.airplay-yMargin, "- * -", cex = 2, col = "red")
text(mean.sales+xMargin, mean.airplay-yMargin, "+ * -", cex = 2, col = "red")
text(mean.sales-xMargin, mean.airplay+yMargin, "- * +", cex = 2, col = "red")
```

## Significance of a correlation {.subsection}

$$t_r = \frac{r \sqrt{N-2}}{\sqrt{1 - r^2}} \\ 
{df} = N - 2$$

$$
\begin{aligned}
H_0 &: t_r = 0 \\
H_A &: t_r \neq 0 \\
H_A &: t_r > 0 \\
H_A &: t_r < 0 \\
\end{aligned}
$$

## r to t

```{r, echo=TRUE}
df  <- N-2
t.r <- ( correlation*sqrt(df) ) / sqrt(1-correlation^2)
cbind(t.r, df)
```

## Visualize

One-sample t-test

```{r, echo=TRUE}
#| output-location: slide

if(!"visualize" %in% installed.packages()) { install.packages("visualize") }
library("visualize")

visualize.t(c(-t.r, t.r),df,section='tails')
```

# Partial correlation {.section}

## Venn diagram


```{r, echo=FALSE, warning=FALSE, message=FALSE, prompt=FALSE}
if(!"VennDiagram" %in% installed.packages()) { install.packages("VennDiagram") };
library("VennDiagram")
```

```{r, echo=FALSE, results='hide'}
grid.newpage()
draw.triple.venn(area1 = 100, area2 = 100, area3 = 100, 
                 n12  = 50, 
                 n23  = 50, 
                 n13  = 50, 
                 n123 = 25, 
                 category = c("X", "Y", "Z"), lty = "blank", 
                 fill = c("skyblue", "pink1", "mediumorchid"), cat.prompts = F)
```


## Partial correlation {.smaller}


$$\LARGE{r_{xy \cdot z} = \frac{r_{xy} - r_{xz} r_{yz}}{\sqrt{(1 - r_{xz}^2)(1 - r_{yz}^2)}}}$$

```{r, echo=TRUE}
adverts <- data$adverts

cor.sales.airplay    <- cor(sales,airplay)
cor.sales.adverts    <- cor(sales,adverts)
cor.airplay.adverts  <- cor(airplay,adverts)

data.frame(cor.sales.airplay, cor.sales.adverts, cor.airplay.adverts)
```

------

```{r, echo=TRUE}
numerator   <- cor.sales.airplay - (cor.sales.adverts * cor.airplay.adverts)
denominator <- sqrt( (1-cor.sales.adverts^2)*(1-cor.airplay.adverts^2) )

partial.correlation <- numerator / denominator

partial.correlation
```

## Significance of partial correlation {.subsection}

One-sample t-test

```{r, echo=TRUE}
#| output-location: slide

df <- N - 3

t.pr <- ( partial.correlation*sqrt(df) ) / sqrt(1-partial.correlation^2)
t.pr

visualize.t(c(-t.pr,t.pr),df,section='tails')
```
