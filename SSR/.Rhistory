}
} else {
mtext(myMain, cex = 1.8)
}
}
}
if (sumSq == "Error") {
# abline(h = mean(mydat$dv), lwd = 3, col = "purple")
points(x = mydat$subjects, y = predPoints, pch = 23, bg = "darkgreen", col = "black", cex = 1.35)
if ("Segments" %in% input$whatDisplay) {
segments(x0 = mydat$subjects, x1 = mydat$subjects, y0 = predPoints, y1 = mydat$accidents, lwd = 2, col = "red")
# s <- round(fullModAccSumSq - modAccSumSquares, 3)
s <- round(modErrorSumSquares, 3)
if ("Sums" %in% input$whatDisplay) {
mtext(paste0("Error Sum of Squares = ", s, "\n Mean Square = ", round(s/dfError, 3)), cex = 1.4)
} else {
mtext(myMain, cex = 1.8)
}
if (overlayFullPred) {
points(x = mydat$subjects, y = myFullMod$fitted.values, pch = 22, bg = "orange", col = "black", cex = 1.35)
legend("topleft", c("Full model predictions", "Current model predictions"), pch = c(22,23), bty = "n", cex = 1.15, col = c("orange", "darkgreen"))
}
}
}
}
source("~/.active-rstudio-document", echo = TRUE)
rm(list=ls())
x.c <- c( .53, .36,  .2,  -.37, -.6,  -.64, -1.27) # Control
x.k <- c( .73, .31,  .03, -.29, -.56, -.96, -1.61) # Knees
x.e <- c(-.78,-.86,-1.35,-1.48,-1.52,-2.04, -2.83) # Eyes
x   <- c( x.c, x.k, x.e )                          # Conditions combined
lab <- c("Control", "Knee", "Eyes")
k_v  <- c(rep(1,length(x.c)),
rep(2,length(x.k)),
rep(3,length(x.e)))       # vector met 1, 2 en 3 corresponderend met de scores.
data <- data.frame(CircadianShift = x, Condition = factor(rep(lab, each = length(x.c))[-c(23:24)]))
write.csv(data, file = "circadianDat.csv", row.names = FALSE)
source("../../plotFunctionsSSR.r")
source("../../plotFunctionsSSR.r")
plotSumSquares(data = data, whatPred = "Mean")
plotSumSquares <- function(data, sumSq = "Total", stats = NULL, plotMean = TRUE, whatDisplay = NULL, whatPred = "Mean") {
nGroups <- length(levels(data$group))
myCols <- palette.colors(n = nGroups+1, palette = "Okabe-Ito")
# Darkening the colors
darkCols <- sapply(myCols, darken_color)
plot(data$dv, col = "black" , pch = 21, bg = myCols[as.numeric(data$group)+1], cex = 1.8, lwd = 3, las = 1, bty = "n",
ylab = "Score", xlab = "Participant Nr.", xlim = c(0, length(data$dv)), ylim = c(2, 10), cex.lab = 1.3, cex.axis=1.3)
totN <- length(data$dv)
# Calculate the grand mean
grandMean <- mean(data$dv)
# Calculate the group mean
groupMeans <- tapply(data$dv, data$group, mean)
# Decompose distances into model error and predictive accuracy
nulModelError <- data$dv - grandMean
altModelError <- data$dv - groupMeans[as.numeric(data$group)]
modelAccuracy <- groupMeans[as.numeric(data$group)] - grandMean
modelMS <- (sum(modelAccuracy^2) / (nGroups - 1) ) # model variance
errorMS <- (sum(altModelError^2) /  (totN - nGroups))  # error variance
totalMS <- (sum(nulModelError^2) / (totN - 1)) # total variance
expVar <- (sum(modelAccuracy^2)) / (sum(nulModelError^2))
fullModMeanSquareError <- round(stats[['Error.Sum.of.Squares']] / (totN - (nGroups)), 3)
if (sumSq == "Total") {
abline(h = mean(data$dv), lwd = 3, col = "purple")
if ("Segments" %in% whatDisplay) {
segments(x0 = data$pp, x1 = data$pp, y0 = mean(data$dv), y1 = data$dv, lwd = 2)
if ("Sums" %in% whatDisplay) {
mtext(paste0("Total Sum of Squares = ", round(sum(nulModelError^2), 2)), cex = 1.8)
} else {
mtext("", cex = 1.8)
}
}
}
if (whatPred == "Group means") {
predPoints <- data$predictedOnGroup
modSumSquares <- stats[['Model.Sum.of.Squares']]
dfMod <- nGroups - 1
dfError <- totN - (nGroups)
} else if (whatPred == "Mean") {
predPoints <- rep(grandMean, totN)
modSumSquares <- 0
dfMod <- totN - (1 + nGroups)
dfError <- 1
}
predPoints <- groupMeans[data$group]
if (sumSq == "Model") {
abline(h = mean(data$dv), lwd = 3, col = "purple")
for (i in 1:nGroups) {
ablineclip(x1 = which(data$group == levels(data$group)[i])[1]-0.65,
x2 = which(data$group == levels(data$group)[i])[groupN]+0.65,
h = groupMeans[i], lwd = 7, col = "black")
ablineclip(x1 = which(data$group == levels(data$group)[i])[1]-0.5,
x2 = which(data$group == levels(data$group)[i])[groupN]+0.5,
h = groupMeans[i], lwd = 3, col = myCols[i+1])
}
# points(x = data$pp, y = predPoints, pch = 23, bg = darkCols[as.numeric(data$group)+1], col = "black", cex = 1.35)
if ("Segments" %in% whatDisplay) {
segments(x0 = data$pp, x1 = data$pp, y0 = predPoints, y1 = mean(data$dv), lwd = 2, col = myCols[as.numeric(data$group)+1])
if ("Sums" %in% whatDisplay) {
if (whatPred == "Mean" | !("F-stat" %in% whatDisplay)) {
mtext(paste0("Model Sum of Squares = ", round(modSumSquares, 3)), cex = 1.4, line = 0)
} else {
mtext(paste0("Model Sum of Squares = ", round(modSumSquares, 3),
"\nMean Square = ", round(modSumSquares/dfMod, 3),
"\nF = ",round(modSumSquares/dfMod, 3),"/",fullModMeanSquareError,
" = ", round(round(modSumSquares/dfMod, 3)/fullModMeanSquareError, 3)) , cex = 1.4, line = 0)
}
} else {
mtext("Model improvement", cex = 1.8)
}
}
}
if (sumSq == "Error") {
for (i in 1:nGroups) {
ablineclip(x1 = which(data$group == levels(data$group)[i])[1]-0.65,
x2 = which(data$group == levels(data$group)[i])[groupN]+0.65,
h = groupMeans[i], lwd = 7, col = "black")
ablineclip(x1 = which(data$group == levels(data$group)[i])[1]-0.5,
x2 = which(data$group == levels(data$group)[i])[groupN]+0.5,
h = groupMeans[i], lwd = 3, col = myCols[i+1])
}
# points(x = data$pp, y = predPoints, pch = 23, bg = darkCols[as.numeric(data$group)+1], col = "black", cex = 1.35)
if ("Segments" %in% whatDisplay) {
segments(x0 = data$pp, x1 = data$pp, y0 = predPoints, y1 = data$dv, lwd = 2)
totSumSquares <- round(stats[['Total.Sum.of.Squares']] - modSumSquares, 3)
if ("Sums" %in% whatDisplay) {
if (whatPred == "Mean" | !("F-stat" %in% whatDisplay)) {
mtext(paste0("Error Sum of Squares = ", totSumSquares), cex = 1.4)
} else {
mtext(paste0("Error Sum of Squares = ", totSumSquares, "\n Mean Square = ", round(totSumSquares/dfError, 3)), cex = 1.4)
}
} else {
mtext("Model error", cex = 1.8)
}
}
}
}
plotSumSquares(data = data, whatPred = "Mean")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
plotSumSquares(data = data, whatPred = "Mean")
source("../../plotFunctionsSSR.r")
plotData <- data
colnames(plotData) <- c("dv", "group")
plotSumSquares(data = data, whatPred = "Mean")
plotSumSquares(data = plotData, whatPred = "Mean")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
plotSumSquares(data = plotData, whatPred = "Mean")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
plotSumSquares(data = plotData, whatPred = "Mean")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3))
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3))
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
source("../../plotFunctionsSSR.r")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
plotData <- data
colnames(plotData) <- c("dv", "group")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
source("../../plotFunctionsSSR.r")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
plotData <- data
colnames(plotData) <- c("pp", "dv", "group")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
source("../../plotFunctionsSSR.r")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
plotData <- data
colnames(plotData) <- c("pp", "group", "dv")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
source("../../plotFunctionsSSR.r")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
plotData <- data
plotData$pp <- 1:nrow(data)
colnames(plotData) <- c("pp", "group", "dv")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
source("../../plotFunctionsSSR.r")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
plotData <- data
colnames(plotData) <- c("pp", "group", "dv")
plotData$pp <- 1:nrow(data)
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
plotData <- data
colnames(plotData) <- c("pp", "group", "dv")
plotData$pp <- 1:nrow(data)
source("../../plotFunctionsSSR.r")
# data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
# plotData <- data
# colnames(plotData) <- c("pp", "group", "dv")
# plotData$pp <- 1:nrow(data)
plotData <- data
plotData$pp <- 1:nrow(data)
colnames(plotData) <- c("pp", "dv", "group")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
rm(list=ls())
x.c <- c( .53, .36,  .2,  -.37, -.6,  -.64, -1.27) # Control
x.k <- c( .73, .31,  .03, -.29, -.56, -.96, -1.61) # Knees
x.e <- c(-.78,-.86,-1.35,-1.48,-1.52,-2.04, -2.83) # Eyes
x   <- c( x.c, x.k, x.e )                          # Conditions combined
lab <- c("Control", "Knee", "Eyes")
k_v  <- c(rep(1,length(x.c)),
rep(2,length(x.k)),
rep(3,length(x.e)))       # vector met 1, 2 en 3 corresponderend met de scores.
data <- data.frame(CircadianShift = x, Condition = factor(rep(lab, each = length(x.c))[-c(23:24)]))
write.csv(data, file = "circadianDat.csv", row.names = FALSE)
source("../../plotFunctionsSSR.r")
# data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
# plotData <- data
# colnames(plotData) <- c("pp", "group", "dv")
# plotData$pp <- 1:nrow(data)
plotData <- data
plotData$pp <- 1:nrow(data)
colnames(plotData) <- c("pp", "dv", "group")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
source("../../plotFunctionsSSR.r")
# data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
# plotData <- data
# colnames(plotData) <- c("pp", "group", "dv")
# plotData$pp <- 1:nrow(data)
plotData <- data
plotData$pp <- 1:nrow(data)
colnames(plotData) <- c("pp", "group", "dv")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
plotData <- data
plotData$pp <- 1:nrow(data)
colnames(plotData) <- c( "group", "dv", "pp")
colnames(plotData) <- c( "group", "dv", "pp")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
plotData <- data
plotData$pp <- 1:nrow(data)
colnames(plotData) <- c("dv", "group", "pp")
colnames(plotData) <- c("dv", "group", "pp")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
plotData <- data
colnames(plotData) <- c("pp", "group", "dv")
plotData$pp <- 1:nrow(data)
plotData$group <- as.factor(plotData$group)
plotData$group
# plotData <- data
# plotData$pp <- 1:nrow(data)
# colnames(plotData) <- c("dv", "group", "pp")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(-3, 3), whatDisplay = "Segments")
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(0, 10), whatDisplay = "Segments")
plotSumSquares(data = plotData, sumSq = "Model", whatPred = "Group means", myLimY = c(0, 10), whatDisplay = "Segments")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
x <- data$Happiness
data$Dose
data$Dose
rm(list=ls())
x.c <- c( .53, .36,  .2,  -.37, -.6,  -.64, -1.27) # Control
x.k <- c( .73, .31,  .03, -.29, -.56, -.96, -1.61) # Knees
x.e <- c(-.78,-.86,-1.35,-1.48,-1.52,-2.04, -2.83) # Eyes
x   <- c( x.c, x.k, x.e )                          # Conditions combined
lab <- c("Control", "Knee", "Eyes")
k_v  <- c(rep(1,length(x.c)),
rep(2,length(x.k)),
rep(3,length(x.e)))       # vector met 1, 2 en 3 corresponderend met de scores.
data <- data.frame(CircadianShift = x, Condition = factor(rep(lab, each = length(x.c))[-c(23:24)]))
write.csv(data, file = "circadianDat.csv", row.names = FALSE)
data <- read.csv("~/GitHubStuff/teaching-statistics/datasets/puppies.csv")
x <- data$Happiness
data$Dose <- factor(data$Dose, levels = c("No puppies", "15 mins", "30 mins"))
x.c <- x[data$Dose == "No puppies"] # Control
x.k <- x[data$Dose == "15 mins"] # Knees
x.e <- x[data$Dose == "30 mins"] # Eyes
data$Dose
as.numeric(data$Dose)
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
sqrt(5.12)
setwd("/Users/johnny/GitHubStuff/teaching-statistics/SSR/2025/")
files <- list.files(full.names = TRUE, pattern = "\\.qmd", recursive = TRUE)
files <- files[-length(files)]
files
for (thisFile in files[c(1:2)]) {
print(thisFile)
quarto::quarto_render(thisFile)
}
for (thisFile in files[c(2)]) {
print(thisFile)
quarto::quarto_render(thisFile)
}
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
files <- list.files(full.names = FALSE, pattern = "\\jasp", recursive = FALSE,
path = "../datasets/2025")
files <- files[order(as.numeric(gsub("\\..*", "", files)))]
files <- files[files!= "OverviewSSR.qmd"]
htmlFiles <- gsub(x =files, pattern = ".jasp", replacement = ".html")
htmlFiles <- gsub(x =files, pattern = ".jasp", replacement = ".html")
htmlFound <- list.files(full.names = FALSE, pattern = "\\html", recursive = FALSE,
path = "../datasets")
csvFound  <- list.files(full.names = FALSE, pattern = "\\csv", recursive = FALSE,
path = "../datasets")
htmlLinks <- sprintf('<a href="https://johnnydoorn.github.io/teaching-statistics/datasets/2025%s" target="_blank" class="external">link</a>',htmlFiles)
htmlLinks[!(htmlFiles %in% htmlFound)] <- "-"
jaspLinks <- sprintf('<a href="https://johnnydoorn.github.io/teaching-statistics/datasets/2025%s" target="_blank"
class="external">link</a>',files)
titles <- gsub(htmlFiles, pattern = ".html", replacement = "")
csvFiles <- gsub(x =files, pattern = ".jasp", replacement = ".csv")
csvLinks <- sprintf('<a href="https://johnnydoorn.github.io/teaching-statistics/datasets/2025%s" target="_blank" class="external">link</a>',csvFiles)
csvLinks[!(csvFiles %in% csvFound)] <- "-"
linkList <- data.frame(Topic = titles, Html = htmlLinks, JASP = jaspLinks)
knitr::kable(dplyr::arrange(linkList), escape = FALSE, format = "html"  ) %>%
kable_styling(full_width = TRUE)
files
files <- files[order(as.numeric(gsub("\\..*", "", files)))]
files <- files[order(as.numeric(gsub("\\..*", "", files)))]
files <- files[files!= "OverviewSSR.qmd"]
htmlFiles <- gsub(x =files, pattern = ".jasp", replacement = ".html")
htmlFiles
csvFound  <- list.files(full.names = FALSE, pattern = "\\csv", recursive = FALSE,
path = "../datasets/2025")
# Correlations:
r_xy = 0.661
r_xz = 0.88
r_yz = 0.633
r_xy - (r_xz * r_yz)
(1- r_xz^2) * (1-r_yz^2)
(1 - r_xz)^2 * (1-r_yz^2)^2
(1 - r_xz)^2 * (1-r_yz)^2
(1 - r_xz^2) * (1-r_yz^2)
# Correlations:
r_xy = 0.661
r_xz = 0.88
r_yz = 0.633
r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
sqrt((1 - r_xz^2) * (1-r_yz^2))
(r_xy - (r_xz * r_yz)) / sqrt((1 - r_xz^2) * (1-r_yz^2))
# Correlations:
r_xy = 0.661
r_xz = 0.88
r_yz = 0.633
r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
(r_xy - (r_xz * r_yz)) / sqrt((1 - r_xz^2) * (1-r_yz^2))
(r_xy - (r_xz * r_yz)) / (sqrt(1 - r_xz^2) * sqrt(1-r_yz^2))
# Correlations:
r_xy = 0.661
r_xz = 0.88
r_yz = 0.633
r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
(r_xy - (r_xz * r_yz)) / (sqrt(1 - r_xz^2) * sqrt(1-r_yz^2))
(r_xy - (r_xz * r_yz)) / (sqrt((1 - r_xz^2) * (1-r_yz^2))
)
# Correlations:
r_xy = 0.6605589
r_xz = 0.8801175
r_yz = 0.6331956
r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
(r_xy - (r_xz * r_yz)) / (sqrt(1 - r_xz^2) * sqrt(1-r_yz^2))
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
dat <- read.csv("~/Downloads/alcoholdriving.csv")
library(onewaytests)
install.packages("onewaytests")
library(onewaytests)
onewaytests::bf.test(dat$accidents ~ dat$condition)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
dat$condition <- as.factor(dat$condition)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
tapply(dat$accidents, dat$condition, function(x) sum((x - median(x))^2)
)
tapply(dat$accidents, dat$condition, var)
tapply(dat$accidents, dat$condition, function(x) mean((x - median(x))^2))
tapply(dat$accidents, dat$condition, var)
table(dat$condition)
tapply(dat$accidents, dat$condition, function(x) mean((x - median(dat$accidents))^2))
tapply(dat$accidents, dat$condition, var)
tapply(dat$accidents, dat$condition, function(x) mean((x - mean(dat$accidents))^2))
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, var.equal = FALSE)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
dat$accidents[1] <- 1e3
dat$condition <- as.factor(dat$condition)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
?onewaytests::welch.test
?onewaytests::bf.test
# Sample data for three groups
group1 <- dat$accidents[dat$condition ==1]
group2 <- dat$accidents[dat$condition ==2]
group3 <- dat$accidents[dat$condition ==3]
# Calculate group means, variances, and sample sizes
means <- c(mean(group1), mean(group2), mean(group3))
variances <- c(var(group1), var(group2), var(group3))
sample_sizes <- c(length(group1), length(group2), length(group3))
# Calculate weighted mean
weighted_mean <- sum(means / variances) / sum(1 / variances)
# Calculate between-group sum of squares (SSB)
SSB <- sum(sample_sizes * (means - weighted_mean)^2)
# Calculate within-group sum of squares (SSW)
SSW <- sum((sample_sizes - 1) * variances)
# Calculate Welch F-statistic
numerator <- SSB / (length(means) - 1)
denominator <- SSW / sum((sample_sizes - 1) / sample_sizes)
F_statistic <- numerator / denominator
# Calculate adjusted degrees of freedom
df1 <- length(means) - 1
df2 <- (sum((sample_sizes - 1) / sample_sizes)^2) / sum(((sample_sizes - 1) / sample_sizes)^2 / (sample_sizes - 1))
# Print results
cat("Welch F-statistic:", F_statistic, "\n")
cat("Degrees of freedom (numerator):", df1, "\n")
cat("Degrees of freedom (denominator):", df2, "\n")
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 1)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0.5)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0.1)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0.2)
trim=function(x){
n=length(x)
xx=sort(x)
lambda=round(n*rate)
xx[(lambda+1):(n-lambda)]
}
wins=function(x){
n=length(x)
xx=sort(x)
lambda=round(n*rate)
xxx=c(rep(xx[lambda+1],lambda),xx[(lambda+1):(n-lambda)],rep(xx[n-lambda],lambda))
xxx
}
group <- dat$condition
n <- length(y)
x.levels <- levels(factor(group))
y <- dat$accidents
group <- dat$condition
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
rate = 0
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
y.vars <- sapply(tapply(y, group, wins), var)
y.means <- sapply(tapply(y, group, trim), mean)
y.means
y.vars
q=(y.n-1)*y.vars/b/(b-1)
q
w <- 1/q
w
U=sum(w)
U
w_y=sum(w*y.means)/U
J=length(x.levels)
A=sum(w*(y.means-w_y)^2)/(J-1)
B=2*(J-2)/(J^2-1)*sum((1-w/U)^2/(b-1))
A
B
w_y
y.means
Ftest=A/(B+1)
Ftest
w
dat <- read.csv("~/Downloads/alcoholdriving.csv")
dat$condition <- as.factor(dat$condition)
y <- dat$accidents
group <- dat$condition
rate = 0
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
y.vars <- sapply(tapply(y, group, wins), var)
y.means <- sapply(tapply(y, group, trim), mean)
q=(y.n-1)*y.vars/b/(b-1)
w <- 1/q
w
U=sum(w)
w_y=sum(w*y.means)/U
J=length(x.levels)
A=sum(w*(y.means-w_y)^2)/(J-1)
B=2*(J-2)/(J^2-1)*sum((1-w/U)^2/(b-1))
A
Ftest=A/(B+1)
Ftest
dat$accidents[90] <- 1e3
y <- dat$accidents
group <- dat$condition
rate = 0
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
y.vars <- sapply(tapply(y, group, wins), var)
y.means <- sapply(tapply(y, group, trim), mean)
q=(y.n-1)*y.vars/b/(b-1)
w <- 1/q
U=sum(w)
w_y=sum(w*y.means)/U
J=length(x.levels)
A=sum(w*(y.means-w_y)^2)/(J-1)
B=2*(J-2)/(J^2-1)*sum((1-w/U)^2/(b-1))
Ftest=A/(B+1)
Ftest
