r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
sqrt((1 - r_xz^2) * (1-r_yz^2))
(r_xy - (r_xz * r_yz)) / sqrt((1 - r_xz^2) * (1-r_yz^2))
# Correlations:
r_xy = 0.661
r_xz = 0.88
r_yz = 0.633
r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
(r_xy - (r_xz * r_yz)) / sqrt((1 - r_xz^2) * (1-r_yz^2))
(r_xy - (r_xz * r_yz)) / (sqrt(1 - r_xz^2) * sqrt(1-r_yz^2))
# Correlations:
r_xy = 0.661
r_xz = 0.88
r_yz = 0.633
r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
(r_xy - (r_xz * r_yz)) / (sqrt(1 - r_xz^2) * sqrt(1-r_yz^2))
(r_xy - (r_xz * r_yz)) / (sqrt((1 - r_xz^2) * (1-r_yz^2))
)
# Correlations:
r_xy = 0.6605589
r_xz = 0.8801175
r_yz = 0.6331956
r_xy - (r_xz * r_yz)
(1 - r_xz^2) * (1-r_yz^2)
(r_xy - (r_xz * r_yz)) / (sqrt(1 - r_xz^2) * sqrt(1-r_yz^2))
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
dat <- read.csv("~/Downloads/alcoholdriving.csv")
library(onewaytests)
install.packages("onewaytests")
library(onewaytests)
onewaytests::bf.test(dat$accidents ~ dat$condition)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
dat$condition <- as.factor(dat$condition)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
tapply(dat$accidents, dat$condition, function(x) sum((x - median(x))^2)
)
tapply(dat$accidents, dat$condition, var)
tapply(dat$accidents, dat$condition, function(x) mean((x - median(x))^2))
tapply(dat$accidents, dat$condition, var)
table(dat$condition)
tapply(dat$accidents, dat$condition, function(x) mean((x - median(dat$accidents))^2))
tapply(dat$accidents, dat$condition, var)
tapply(dat$accidents, dat$condition, function(x) mean((x - mean(dat$accidents))^2))
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, var.equal = FALSE)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
dat$accidents[1] <- 1e3
dat$condition <- as.factor(dat$condition)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
?onewaytests::welch.test
?onewaytests::bf.test
# Sample data for three groups
group1 <- dat$accidents[dat$condition ==1]
group2 <- dat$accidents[dat$condition ==2]
group3 <- dat$accidents[dat$condition ==3]
# Calculate group means, variances, and sample sizes
means <- c(mean(group1), mean(group2), mean(group3))
variances <- c(var(group1), var(group2), var(group3))
sample_sizes <- c(length(group1), length(group2), length(group3))
# Calculate weighted mean
weighted_mean <- sum(means / variances) / sum(1 / variances)
# Calculate between-group sum of squares (SSB)
SSB <- sum(sample_sizes * (means - weighted_mean)^2)
# Calculate within-group sum of squares (SSW)
SSW <- sum((sample_sizes - 1) * variances)
# Calculate Welch F-statistic
numerator <- SSB / (length(means) - 1)
denominator <- SSW / sum((sample_sizes - 1) / sample_sizes)
F_statistic <- numerator / denominator
# Calculate adjusted degrees of freedom
df1 <- length(means) - 1
df2 <- (sum((sample_sizes - 1) / sample_sizes)^2) / sum(((sample_sizes - 1) / sample_sizes)^2 / (sample_sizes - 1))
# Print results
cat("Welch F-statistic:", F_statistic, "\n")
cat("Degrees of freedom (numerator):", df1, "\n")
cat("Degrees of freedom (denominator):", df2, "\n")
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::bf.test(dat$accidents ~ dat$condition, data = dat)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 1)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0.5)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0.1)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0)
onewaytests::welch.test(dat$accidents ~ dat$condition, data = dat, rate = 0.2)
trim=function(x){
n=length(x)
xx=sort(x)
lambda=round(n*rate)
xx[(lambda+1):(n-lambda)]
}
wins=function(x){
n=length(x)
xx=sort(x)
lambda=round(n*rate)
xxx=c(rep(xx[lambda+1],lambda),xx[(lambda+1):(n-lambda)],rep(xx[n-lambda],lambda))
xxx
}
group <- dat$condition
n <- length(y)
x.levels <- levels(factor(group))
y <- dat$accidents
group <- dat$condition
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
rate = 0
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
y.vars <- sapply(tapply(y, group, wins), var)
y.means <- sapply(tapply(y, group, trim), mean)
y.means
y.vars
q=(y.n-1)*y.vars/b/(b-1)
q
w <- 1/q
w
U=sum(w)
U
w_y=sum(w*y.means)/U
J=length(x.levels)
A=sum(w*(y.means-w_y)^2)/(J-1)
B=2*(J-2)/(J^2-1)*sum((1-w/U)^2/(b-1))
A
B
w_y
y.means
Ftest=A/(B+1)
Ftest
w
dat <- read.csv("~/Downloads/alcoholdriving.csv")
dat$condition <- as.factor(dat$condition)
y <- dat$accidents
group <- dat$condition
rate = 0
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
y.vars <- sapply(tapply(y, group, wins), var)
y.means <- sapply(tapply(y, group, trim), mean)
q=(y.n-1)*y.vars/b/(b-1)
w <- 1/q
w
U=sum(w)
w_y=sum(w*y.means)/U
J=length(x.levels)
A=sum(w*(y.means-w_y)^2)/(J-1)
B=2*(J-2)/(J^2-1)*sum((1-w/U)^2/(b-1))
A
Ftest=A/(B+1)
Ftest
dat$accidents[90] <- 1e3
y <- dat$accidents
group <- dat$condition
rate = 0
n <- length(y)
x.levels <- levels(factor(group))
y.n <- tapply(y, group, length)
lambda=round(y.n*rate)
b=y.n-2*lambda
y.vars <- sapply(tapply(y, group, wins), var)
y.means <- sapply(tapply(y, group, trim), mean)
q=(y.n-1)*y.vars/b/(b-1)
w <- 1/q
U=sum(w)
w_y=sum(w*y.means)/U
J=length(x.levels)
A=sum(w*(y.means-w_y)^2)/(J-1)
B=2*(J-2)/(J^2-1)*sum((1-w/U)^2/(b-1))
Ftest=A/(B+1)
Ftest
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
8.107 / 9.744
9.744 ï»¿/ 8.107
9.744 / 8.107
setwd("/Users/johnny/GitHubStuff/teaching-statistics/SSR/2025/")
files <- list.files(full.names = TRUE, pattern = "\\.qmd", recursive = TRUE)
files <- files[-length(files)]
files
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
for (thisFile in files[c(3)]) {
print(thisFile)
quarto::quarto_render(thisFile)
}
files <- list.files(full.names = FALSE, pattern = "\\qmd", recursive = FALSE, path = "../extra-texts")
lectures <- data.frame()
n <- length(files)
files <- files[order(as.numeric(gsub("\\..*", "", files)))]
files <- files[files!= "OverviewSSR.qmd"]
htmlFiles <- gsub(x =files, pattern = ".qmd", replacement = ".html")
htmlFiles <- htmlFiles[htmlFiles %in% c("OneSidedVsTwoSided.html","Heteroscedasticity.html", "EffSizeVsTestStat.html", "ViolatingAssumptionsANOVA.html")]
allLinks <- sprintf('<a href="https://johnnydoorn.github.io/teaching-statistics/extra-texts/%s" target="_blank" class="external">link</a>',htmlFiles)
titles <- gsub(htmlFiles, pattern = ".html", replacement = "")
linkList <- data.frame(Topic = titles, Links = allLinks)
knitr::kable(dplyr::arrange(linkList), escape = FALSE, format = "html"  ) %>%
kable_styling(full_width = TRUE)
library(stringr)
library("lubridate")
library("dplyr")
library('kableExtra')
allLinks <- c("https://statisticalreasoning-uva.shinyapps.io/NHST_Binomial",
"https://statisticalreasoning-uva.shinyapps.io/NHST_Continuous",
# "https://statisticalreasoning-uva.shinyapps.io/NHST_Fdistribution",
"https://statisticalreasoning-uva.shinyapps.io/onewayANOVA",
# "https://statisticalreasoning-uva.shinyapps.io/ANCOVA",
# "https://statisticalreasoning-uva-2.shinyapps.io/Multi-ANOVA",
# "https://statisticalreasoning-uva-2.shinyapps.io/RM_ANOVA",
"https://statisticalreasoning-uva-2.shinyapps.io/SimpleRegression"
# "https://statisticalreasoning-uva-2.shinyapps.io/MultiRegression"
)
topics <- gsub("shinyapps.io/", "", gsub("shinyapps.io/", "", str_extract(allLinks, "shinyapps.io/(.*)")))
allLinks <- sprintf('<a href="%s" target="_blank" class="external">link</a>',allLinks)
knitr::kable(dplyr::arrange(data.frame(Topic = topics, Link = allLinks)), escape = FALSE, format = "html"  ) %>%
kable_styling(full_width = TRUE)
files <- list.files(full.names = FALSE, pattern = "\\qmd", recursive = FALSE, path = "../extra-texts")
lectures <- data.frame()
n <- length(files)
files <- files[order(as.numeric(gsub("\\..*", "", files)))]
files <- files[files!= "OverviewSSR.qmd"]
htmlFiles <- gsub(x =files, pattern = ".qmd", replacement = ".html")
htmlFiles <- htmlFiles[htmlFiles %in% c("OneSidedVsTwoSided.html","Heteroscedasticity.html", "EffSizeVsTestStat.html", "ViolatingAssumptionsANOVA.html")]
allLinks <- sprintf('<a href="https://johnnydoorn.github.io/teaching-statistics/extra-texts/%s" target="_blank" class="external">link</a>',htmlFiles)
titles <- gsub(htmlFiles, pattern = ".html", replacement = "")
linkList <- data.frame(Topic = titles, Links = allLinks)
knitr::kable(dplyr::arrange(linkList), escape = FALSE, format = "html"  ) %>%
kable_styling(full_width = TRUE)
files
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
set.seed(1976)
# Simulate data
n <- 20
k <- 3
nationality       <- round(runif(n,1,k),0)
nationality <- factor(nationality)
levels(nationality) <- c("Dutch", "German", "Belgian")
mu.covar    <- 8
sigma.covar <- 1
openness       <- round(rnorm(n,mu.covar,sigma.covar),2)
# Create dummy variables
dummy.1 <- ifelse(nationality == "German", 1, 0)
dummy.2 <- ifelse(nationality == "Belgian", 1, 0)
# Set parameters
b.0 <- 15 # initial value for group 1
b.1 <- 3  # difference between group 1 and 2
b.2 <- 4  # difference between group 1 and 3
b.3 <- 3  # Weight for covariate
# Create error
error <- rnorm(n,0,2)
# Clear memory
rm(list=ls())
if(!"ggplot2" %in% installed.packages()) { install.packages("ggplot2") }
library("ggplot2")
if(!"DT" %in% installed.packages()) { install.packages("DT") }
library("DT")
set.seed(1976)
# Simulate data
n <- 20
k <- 3
nationality       <- round(runif(n,1,k),0)
nationality <- factor(nationality)
levels(nationality) <- c("Dutch", "German", "Belgian")
mu.covar    <- 8
sigma.covar <- 1
openness       <- round(rnorm(n,mu.covar,sigma.covar),2)
# Create dummy variables
dummy.1 <- ifelse(nationality == "German", 1, 0)
dummy.2 <- ifelse(nationality == "Belgian", 1, 0)
# Set parameters
b.0 <- 15 # initial value for group 1
b.1 <- 3  # difference between group 1 and 2
b.2 <- 4  # difference between group 1 and 3
b.3 <- 3  # Weight for covariate
# Create error
error <- rnorm(n,0,2)
# Define model
extraversion <- b.0 + b.1 * dummy.1 + b.2 * dummy.2 + b.3 * openness + error
extraversion <- round(extraversion,2)
error <- round(error,2)
n <- 1:length(extraversion)
dummies <- data.frame(nationality, b.0, b.1, dummy.1, b.2, dummy.2, b.3, openness, error, extraversion)
datatable(dummies, options = list(searching = FALSE, scrollY = 435, paging = FALSE, info = FALSE))
# put data in data frame
data <- data.frame(nationality, openness, extraversion)
# Order by group
data <- data[order(as.numeric(data$nationality)),]
data <- cbind(n, data)
# Write data for use in SPSS
write.csv(data, "ANCOVA_OpenNationality.csv", row.names=FALSE)
plotData <- data
datatable(data,
extensions = 'Buttons',
options    = list(searching = FALSE,
scrollY   = 300,
paging    = F,
info      = F,
dom       = 'Bfrtip',
buttons   = c('csv')),
)
source("../../plotFunctionsSSR.r")
colnames(plotData) <- c("pp", "group", "cov", "dv")
plotData$group <- as.factor(plotData$group)
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(35, 50), whatDisplay = c("Segments", "Sums"))
source("../../plotFunctionsSSR.r")
colnames(plotData) <- c("pp", "group", "cov", "dv")
plotData$group <- as.factor(plotData$group)
plotSumSquares(data = plotData, whatPred = "Mean", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
plotSumSquares(data = plotData, whatPred = "Group means", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
source("../../plotFunctionsSSR.r")
colnames(plotData) <- c("pp", "group", "cov", "dv")
plotData$group <- as.factor(plotData$group)
plotSumSquaresCov(data = plotData, whatPred = "Mean", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("../../plotFunctionsSSR.r")
colnames(plotData) <- c("pp", "group", "cov", "dv")
plotData$group <- as.factor(plotData$group)
plotSumSquaresCov(data = plotData, whatPred = "Mean", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("../../plotFunctionsSSR.r")
source("../../plotFunctionsSSR.r")
colnames(plotData) <- c("pp", "group", "cov", "dv")
plotData$group <- as.factor(plotData$group)
plotSumSquaresCov(data = plotData, whatPred = "Mean", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
plotSumSquaresCov(data = plotData, whatPred = "Group means", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
plotSumSquaresCov(data = plotData, sumSq = "Model", whatPred = "Group means", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
plotSumSquaresCov(data = plotData, sumSq = "Model", whatPred = "Group means", myLimY = c(30, 50), whatDisplay = c("Segments", "Sums"))
plotSumSquaresCov(data = plotData, sumSq = "Model", whatPred = "Group means", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
data$model.covar <- round(fit.covar$fitted.values,2)
data$model.covar <- round(fit.covar$fitted.values,2)
fit.covar <- lm(extraversion ~ openness, data)
data$model.covar <- round(fit.covar$fitted.values,2)
plotSumSquaresCov(data = plotData, sumSq = "Model", whatPred = "Cov", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
plotSumSquaresCov(data = plotData, sumSq = "Model", whatPred = "Group means + Cov", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
plotSumSquaresCov(data = plotData, sumSq = "Model", whatPred = "Group means + cov", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
plotSumSquaresCov(data = plotData, sumSq = "Error", whatPred = "Group means + cov", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
plotSumSquaresCov(data = plotData, sumSq = "Error", whatPred = "Group means + cov", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
plotSumSquaresCov(data = plotData, sumSq = "Error", whatPred = "Group means + cov", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
fullModMeanSquareError
totN
stats[, 1]
stats[stats[, 1] == 'Error.Sum.of.Squares', 2]
stats
stats
stats$'Error.Sum.of.Squares'
round(stats$'Error.Sum.of.Squares' / (totN - (1 + nGroups)), 3)
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
plotSumSquaresCov(data = plotData, sumSq = "Error", whatPred = "Group means + cov", myLimY = c(32, 48), whatDisplay = c("Segments", "Sums"))
fullModMeanSquareError
sumSq
points(x = data$pp, y = predPoints, pch = 23, bg = darkCols[as.numeric(data$group)+1], col = "black", cex = 1.35)
paste0("Error Sum of Squares = ", totSumSquares, "\n Mean Square = ", round(totSumSquares/dfError, 3)), cex = 1.4
paste0("Error Sum of Squares = ", totSumSquares, "\n Mean Square = ", round(totSumSquares/dfError, 3))
totSumSquares <- round(stats$'Total.Sum.of.Squares' - modSumSquares, 3)
totSumSquares
stats$'Total.Sum.of.Squares'
modSumSquares
stat[['Full.Model.Sum.of.Squares']]
stat['Full.Model.Sum.of.Squares']
stat$'Full.Model.Sum.of.Squares'
stats$'Full.Model.Sum.of.Squares'
stats['Full.Model.Sum.of.Squares']
stats['Full.Model.Sum.of.Squares']
stats[['Full.Model.Sum.of.Squares']]
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
source("~/GitHubStuff/teaching-statistics/SSR/plotFunctionsSSR.r")
nationality
as.numeric(nationality)
# Clear memory
rm(list=ls())
if(!"ggplot2" %in% installed.packages()) { install.packages("ggplot2") }
library("ggplot2")
if(!"DT" %in% installed.packages()) { install.packages("DT") }
library("DT")
set.seed(1976)
# Simulate data
n <- 18
k <- 3
# nationality       <- round(runif(n,1,k),0)
# nationality <- factor(nationality)
# levels(nationality) <- c("Dutch", "German", "Belgian")
nationality <- as.factor(rep(c("Dutch", "German", "Belgian"), each = n/k))
mu.covar    <- 8
sigma.covar <- 1
openness       <- round(rnorm(n,mu.covar,sigma.covar),2)
# Create dummy variables
dummy.1 <- ifelse(nationality == "German", 1, 0)
dummy.2 <- ifelse(nationality == "Belgian", 1, 0)
# Set parameters
b.0 <- 15 # initial value for group 1
b.1 <- 3  # difference between group 1 and 2
b.2 <- 4  # difference between group 1 and 3
b.3 <- 3  # Weight for covariate
# Create error
error <- rnorm(n,0,2)
nationality
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
1.804 * 7.996
1.804 * 7.996 + 23.302
1.804 * 7.996 + 23.202
1.804 * 7.996 + 25.903
1.804 * 7.64 + 25.903
1.804 * 7.996 + 25.903 -2.701
1.804 * 7.983 + 25.903 -2.701
rm(list=ls())
source("~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA/plotSquaresFunction.R")
data <- read.csv("anova_alcohol_speed_daytime.csv")
data$speed <- factor(data$speed, levels = c("none", "some", "much"))
levels(data$speed) <- c("none (S)", "some (S)", "much (S)")
data$alcohol <- factor(data$alcohol, levels = c("none", "some", "much"))
levels(data$alcohol) <- c("none (A)", "some (A)", "much (A)")
if(!"ggplot2" %in% installed.packages()) { install.packages("ggplot2") }
library("ggplot2")
# set.seed(1976)
if(!"DT" %in% installed.packages()) { install.packages("DT") }
library("DT")
input <- list()
input$whatPred <- "Alcohol + Speed + A:S"
input$whatDisplay <- c("Segments", "Sum sq")
plotSumSquares(mydat, input = input, sumSq = "Error", myMain = "Full Model SS Error",
alcColors = palette.colors(n = 3, palette = "Okabe-Ito"),
speedSymbols = c(21, 22, 23))
input <- list()
input$whatPred <- "Alcohol + Speed + A:S"
input$whatDisplay <- c("Segments", "Sums")
plotSumSquares(mydat, input = input, sumSq = "Error", myMain = "Full Model SS Error",
alcColors = palette.colors(n = 3, palette = "Okabe-Ito"),
speedSymbols = c(21, 22, 23))
input <- list()
input$whatPred <- "Alcohol + Speed + A:S"
input$whatDisplay <- c("Segments", "Sums")
plotSumSquares(mydat, input = input, sumSq = "Model", myMain = "Full Model SS",
alcColors = palette.colors(n = 3, palette = "Okabe-Ito"),
speedSymbols = c(21, 22, 23))
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
source("~/GitHubStuff/teaching-statistics/SSR/2024/renderAllLectures.R")
shiny::runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
Acols <- palette.colors(n = 9, palette = "Okabe-Ito")[2:4]
Bcols <- palette.colors(n = 9, palette = "Okabe-Ito")[5:7]
# Combine both: A sets the main hue, B sets lightness
myCols <- c(
colorspace::mixcolor(0.3, Acols[1], Bcols[1]),
colorspace::mixcolor(0.3, Acols[1], Bcols[2]),
colorspace::mixcolor(0.3, Acols[1], Bcols[3]),
colorspace::mixcolor(0.3, Acols[2], Bcols[1]),
colorspace::mixcolor(0.3, Acols[2], Bcols[2]),
colorspace::mixcolor(0.3, Acols[2], Bcols[3]),
colorspace::mixcolor(0.3, Acols[3], Bcols[1]),
colorspace::mixcolor(0.3, Acols[3], Bcols[2]),
colorspace::mixcolor(0.3, Acols[3], Bcols[3])
)
library(colorspace)
baseCols <- palette.colors(n = 9, palette = "Okabe-Ito")[2:4]
myCols <- rep(lighten(baseCols, seq(0, 0.4, length.out = 3)), each = 3)
myCols
paste0(c("noneS", "someS", 'highS'), c("noneA", "someA", 'highA'), collapse "+")
paste0(c("noneS", "someS", 'highS'), c("noneA", "someA", 'highA'), collapse ="+")
paste0(c("noneS", "someS", 'highS'), c("noneA", "someA", 'highA'), sep ="+")
paste(c("noneS", "someS", 'highS'), c("noneA", "someA", 'highA'), sep ="+")
paste(rep(c("noneS", "someS", 'highS'), each =3), c("noneA", "someA", 'highA'), sep ="+")
runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
shiny::runApp('~/GitHubStuff/ShinyApps/ShinyApps/FacANOVA')
r_xy = 0.661
r_xz = 0.88
r_yz = 0.633
>
(1 - r_xz^2) * (1 - r_yz^2)
(r_xy - (r_xz * r_yz)) / sqrt((1 - r_xz^2) * (1-r_yz^2))
(1 - r_xz^2) * (1 - r_yz^2)
r_xy - (r_xz * r_yz)
(1 - r_yz^2)
(1 - r_xz^2)
r_xz = 0.88
0.88^2
1 - 0.88^2
0.633^2
1 - 0.633^2
0.599311 * 0.2256
397 + 329
397 / (397 + 329)
144 / (144+117)
runApp('~/GitHubStuff/ShinyApps/ShinyApps/samplingDist')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/samplingDist')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/samplingDist')
runApp('~/GitHubStuff/ShinyApps/ShinyApps/samplingDist')
shiny::runApp('~/GitHubStuff/ShinyApps/ShinyApps/NHST_Fdistribution')
19*0.372
